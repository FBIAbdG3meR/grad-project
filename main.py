import google.generativeai as genai

from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch

import os
from dotenv import load_dotenv

import sys

load_dotenv()

values = dict(enumerate(sys.argv))

input_file = values.get(1)
output_file = values.get(2)

if input_file is None or not (input_file.endswith('.pdf')):
    print('Please specify the input pdf file')
    exit(1)

if output_file is None or not (output_file.endswith('.pdf')):
    print('Please specify the output pdf file')
    exit(1)


genai.configure(api_key=os.getenv('API_KEY'))

model = genai.GenerativeModel("gemini-1.5-pro")
sample_pdf = genai.upload_file(input_file)

response = model.generate_content(['''
Read the following report generated by nessus, that provides vulnerabilities for a web application;
write the solution for the vulnerabilities and write them in details, provided and structure the response to be reassembled as a pdf file
make sure every line is in with 200 characters length
''', sample_pdf])

def generate_pdf_from_md_text(pdf_file, text, page_size=letter, margin=1 * inch):
    # Calculate page dimensions
    page_width, page_height = page_size

    # Initialize canvas
    c = canvas.Canvas(pdf_file, pagesize=page_size)

    # Define margins and usable text area
    usable_width = page_width - 2 * margin
    usable_height = page_height - 2 * margin

    # Starting position for the text
    x = margin
    y = page_height - margin

    # Line spacing
    line_spacing = 4

    # Font sizes for headings and normal text
    font_styles = {
        "h1": ("Times-Bold", 18),
        "h2": ("Times-Bold", 16),
        "h3": ("Times-Bold", 14),
        "p": ("Times-Roman", 12),
    }

    def add_line(line, style):
        """Draw a line of text with the given style, handling inline bold formatting."""
        nonlocal x, y
        font_name, font_size = font_styles[style]
        c.setFont(font_name, font_size)
        line_height = font_size + line_spacing

        words = line.split(" ")
        current_x = x

        for word in words:
            if "**" in word:  # Check for bold markers
                if word.startswith("**") and word.endswith("**"):  # Entire word bold
                    word = word.strip("**")
                    c.setFont("Times-Bold", font_size)
                elif word.startswith("**"):  # Bold starts here
                    word = word[2:]
                    c.setFont("Times-Bold", font_size)
                elif word.endswith("**"):  # Bold ends here
                    word = word[:-2]
                    c.setFont("Times-Bold", font_size)

            word_width = c.stringWidth(word + " ", font_name, font_size)

            if current_x + word_width > usable_width:  # Wrap line
                if y - line_height < margin:  # New page
                    c.showPage()
                    c.setFont(font_name, font_size)
                    y = page_height - margin
                current_x = x
                y -= line_height

            c.drawString(current_x, y, word)
            current_x += word_width

            # Reset font to normal for the next word
            if "**" in word:
                c.setFont(font_name, font_size)

        y -= line_height

    # Parse and render the text line by line
    for line in text.splitlines():
        if line.startswith("### "):
            add_line(line[4:], "h3")
        elif line.startswith("## "):
            add_line(line[3:], "h2")
        elif line.startswith("# "):
            add_line(line[2:], "h1")
        elif line.strip():  # Paragraph text
            add_line(line, "p")
        else:  # Blank lines
            y -= font_styles["p"][1] + line_spacing

    # Save the PDF
    c.save()
    print(f"PDF generated: {pdf_file}")

generate_pdf_from_md_text(output_file, response.text)